@using Destiny2DataLibrary.Models

<div class="nav-menu">
    <div class="nav_buttons">
        <button class="search-button" id="show_menu_button" @onclick="ToggleNavMenu" >
            <img id="search-icon" src="css/icons/search.svg" />
        </button>
        <button class="comparer-button" style="@buttonDisplayParam">
            COMPARER
        </button>
    </div>

    <div class="search-nav-menu" style="@navMenuDisplayParam">
        <div class="search-area">
            <button class="search-button" @onclick="ToggleNavMenu" style="visibility:hidden">
                <img id="search-icon" src="css/icons/search.svg" />
            </button>
            <input class="search-text-field" @oninput=@((e)=>FindArchetypes(e.Value as string)) @onfocusout=@HideSuggestMenu
                placeholder="SEARCH WEAPON..."  />
        </div>
        <div class="@searchSuggestMenuClass">
            @foreach (var suggestedArchetype in suggestedArchetypes)
            {
                <a href=@($"archetype/{suggestedArchetype.Id}") @onclick="ToggleNavMenu">
                    <button class="suggested-archetype">
                        <img src=@($"css/icons/WeaponTypes/{suggestedArchetype.WeaponType.Name}.svg") class="archetype-icon">
                        @(suggestedArchetype.Name.ToUpper() + " " + suggestedArchetype.RoundsPerMinute + "rpm")
                    </button>
                </a>
            }
        </div>
        <div class="weapon-navigator">
            <div class="weapon-type-list">
                @foreach (WeaponType weaponType in weaponTypes)
                {
                    <button class="weapon-type-button" @onclick="()=>ShowArchetypes(weaponType.Id)">
                        <img src=@($"css/icons/WeaponTypes/{weaponType.Name}.svg") class="weapon-type-icon">
                        @weaponType.Name.ToUpper()
                    </button>
                }
            </div>
            <div class="archetype-list" style="@archetypeDisplayParam">
                @foreach(Archetype archetype in WeaponTypeArchetypes)
                {
                    <a href=@($"archetype/{archetype.Id}") @onclick="ToggleNavMenu">
                        <button class="weapon-type-button" >
                            <img src=@($"css/icons/WeaponTypes/{archetype.WeaponType.Name}.svg") class="archetype-icon">
                            @(archetype.Name.ToUpper() +" " +archetype.RoundsPerMinute+"rpm") 
                        </button>
                    </a>
                }
            </div>
        </div>
    </div>
</div>



@code {

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string navMenuDisplayParam = "width:0";
    private string buttonDisplayParam = "";
    private string archetypeDisplayParam = "width:0";


    private string hiddenSearchSuggestMenu = "search-suggest-menu-hidden";
    private string showSearchSuggestMenu = "search-suggest-menu";
    private string searchSuggestMenuClass = "search-suggest-menu-hidden";


    private IEnumerable<Archetype> suggestedArchetypes = new Archetype[0];

    private void LoadPage(int id){
    }

    private void ToggleNavMenu()
    {
        //if menu is open
        if (navMenuDisplayParam == "")
        {
            navMenuDisplayParam = "width:0";
            buttonDisplayParam = "";
        }
        else 
        {
            navMenuDisplayParam = "";
            buttonDisplayParam = "display:none";
        }
    }

    private void FindArchetypes(string? query)
    {
        searchSuggestMenuClass = showSearchSuggestMenu;
        Console.Write(query + " -> ");
        if (searchService == null || query == null) return;
        var findedArchetypes = searchService.FindArchetypes(query);
        suggestedArchetypes = new Archetype[0];
        if (findedArchetypes.Count()==0) return;
        suggestedArchetypes = findedArchetypes;
        foreach (Archetype archetype in findedArchetypes)
        {
            Console.WriteLine(archetype.WeaponType.Name+" : "+archetype.Name);
        }
    }

    private async Task HideSuggestMenu()
    {
        await Task.Delay(200);
        searchSuggestMenuClass = hiddenSearchSuggestMenu;
    }
}
